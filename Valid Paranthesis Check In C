#include <stdio.h>
#include <stdlib.h>

struct stack {
    int top;
    int size;
    char *arr;
};

int isEmpty(struct stack *s) {
    if (s->top == -1) {
        return 1;
    } else {
        return 0;
    }
}

int isfull(struct stack *s) {
    if (s->top == s->size - 1) {
        return 1;
    } else {
        return 0;
    }
}

void push(struct stack* s, char val) {
    if (isfull(s)) {
        printf("Stack Overflow\n");
    } else {
        s->top++;
        s->arr[s->top] = val;
        //printf("Pushed %c\n", val);
    }
}

char pop(struct stack* s) {
    if (isEmpty(s)) {
        printf("Stack Underflow\n");
        return -1;
    } else {
        char val1 = s->arr[s->top];
        s->top = s->top - 1;
        return val1;
    }
}
int isMatchingPair(char open, char close) {
    return (open == '(' && close == ')') ||
           (open == '{' && close == '}') ||
           (open == '[' && close == ']');
}
int valid_paranthesis(char*exp){
    struct stack* sp;
    sp = (struct stack*) malloc(sizeof(struct stack));
    sp->top = -1;
    sp->size = 100;
    sp->arr = (char*) malloc(sp->size * sizeof(char));
    for (int i =0; exp[i]!='\0'; i++){
        if ((exp[i]=='(') || (exp[i]=='{') || (exp[i]=='[')){
            push(sp, exp[i]);
        } else if ((exp[i]==')') || (exp[i]=='}') || (exp[i]==']')){
            if (isEmpty(sp)){
                free(sp->arr);
                free(sp);
                return 0;
                }
            char topChar = pop(sp);
            if (!isMatchingPair(topChar, exp[i])) {
                free(sp->arr);
                free(sp);
                return 0;
            }
        }
    }
    int result = isEmpty(sp);
    free(sp->arr);
    free(sp);
    return result;
}
int main() {
    char* exp="(27]32+4])";
    if(valid_paranthesis(exp)){
        printf("\nThe parantheses is matching\n");
    }
    else{
        printf("Parantheses is not matching\n");
    }
    return 0;
}