#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct stack {
    int top;
    int size;
    char *arr;
};
int stackTop(struct stack* s) {
    return s->arr[s->top];
}
int isfull(struct stack *ptr) {
    if (ptr->top == ptr->size - 1)
        return 1;
    else
        return 0;
}
int isEmpty(struct stack *ptr) {
    if (ptr->top == -1)
        return 1;
    else
        return 0;
}
void push(struct stack* s, char val) {
    if (isfull(s))
        printf("Stack Overflow\n");
    else {
        s->top++;
        s->arr[s->top] = val;
    }
}
char pop(struct stack* s) {
    if (isEmpty(s)) {
        printf("Stack Underflow\n");
        return -1;
    } else {
        char val1 = s->arr[s->top];
        s->top = s->top - 1;
        return val1;
    }
}
int precedence(char ch){
    if (ch=='*' || ch=='/')
        return 2;
    else if (ch=='+' || ch=='-')
        return 1;
    else
        return 0;
}
int is_operator(char ch){
    if(ch=='+' || ch=='-' ||ch=='*' || ch=='/') 
        return 1;
    else
        return 0;
}
char* itp(char*infix){
    struct stack* sp;
    sp = (struct stack*) malloc(sizeof(struct stack));
    sp->top=-1;
    sp->size=100;
    sp->arr = (char*) malloc(sp->size * sizeof(char));
    char* postfix = (char*) malloc((strlen(infix)+1)*sizeof(char));
    int i=0, j=0;
    while(infix[i]!='\0'){
        if(!is_operator(infix[i])) {
            postfix[j]=infix[i];
            i++,j++;
        } else{
          if(precedence(infix[i])>precedence(stackTop(sp))) {
              push(sp, infix[i]);
              i++;
          }
          else {
              postfix[j]=pop(sp);
              j++;
          }
        }
    }
    while (!isEmpty(sp)){
        postfix[j]=pop(sp);
        j++;
    }
    postfix[j]='\0';
    return postfix;
}
int main() {
    char infix[200];
    printf("Enter the expression: ");
    fgets(infix, sizeof(infix), stdin);
    infix[strcspn(infix, "\n")] = '\0';
    printf("\nPostfix expression is %s", itp(infix));
    return 0;
}