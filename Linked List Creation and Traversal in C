#include<stdio.h>
#include<stdlib.h>

// Define a Node structure using typedef
// 'node' will be used instead of 'struct Node'
typedef struct Node {
    int data;           // stores the value
    struct Node* next;  // pointer to the next node
} node;

// Function to display the linked list
void linkedListTraversal(node* ptr) {
    if (ptr == NULL) {
        printf("List is empty.\n");
        return;
    }
    while (ptr != NULL) {
        printf("%d -> ", ptr->data); // print current node
        ptr = ptr->next;            // move to next node
    }
    printf("NULL\n");
}

// Function to create a linked list with n nodes
node* createList(int n) {
    int i;
    node* head = NULL; // head pointer (first node)
    node* tmp = NULL;
    node* p = NULL;

    for (i = 0; i < n; i++) {
        // Create new node
        tmp = (node*)malloc(sizeof(node));
        printf("\nEnter data for %d node: ", i+1);
        scanf("%d", &(tmp->data));
        tmp->next = NULL;

        // If list is empty, new node becomes head
        if (head == NULL) {
            head = tmp;
        } else {
            // Traverse to the last node
            p = head;
            while (p->next != NULL) {
                p = p->next;
            }
            // Add new node at the end
            p->next = tmp;
        }
    }
    return head; // return pointer to head node
}

// Function to insert node (at beginning, index, or end)
node* insertNode(node* head, int data, int choice, int index) {
    node* ptr = (node*)malloc(sizeof(node)); // create new node
    ptr->data = data;

    if (choice == 1) {  
        // Insert at beginning
        ptr->next = head;
        head = ptr;
    } 
    else if (choice == 2) {  
        // Insert at given index
        node* p = head;
        int i = 0;
        // Traverse until (index-1) node
        while (i != index - 1 && p->next != NULL) {
            p = p->next;
            i++;
        }
        // Insert between nodes
        ptr->next = p->next;
        p->next = ptr;
    } 
    else if (choice == 3) {  
        // Insert at end
        if (head == NULL) {
            ptr->next = NULL;
            return ptr; // if list empty, new node becomes head
        }
        node* p = head;
        while (p->next != NULL) {
            p = p->next;
        }
        p->next = ptr;
        ptr->next = NULL;
    }
    return head;
}

// Function to delete node (first, index, or last)
node* deleteNode(node* head, int choice, int index) {
    if (head == NULL) {
        printf("List is empty.\n");
        return head;
    }
    if (choice == 1) {  
        // Delete first node
        node* ptr = head;
        head = head->next;
        free(ptr);
    } 
    else if (choice == 2) {  
        // Delete at given index
        if (index == 0) return deleteNode(head, 1, 0); // same as deleting first
        node* p = head;
        node* q = head->next;
        int i = 0;
        // Traverse to (index-1) node
        while (i != index - 1 && q->next != NULL) {
            p = p->next;
            q = q->next;
            i++;
        }
        // Remove q
        p->next = q->next;
        free(q);
    } 
    else if (choice == 3) {  
        // Delete last node
        if (head->next == NULL) {
            free(head); // only one node
            return NULL;
        }
        node* p = head;
        node* q = head->next;
        while (q->next != NULL) {
            p = p->next;
            q = q->next;
        }
        // q is last node, remove it
        p->next = NULL;
        free(q);
    }
    return head;
}

// Function to count total nodes
void countNodes(node* head) {
    int count = 0;
    node* temp = head;
    while (temp != NULL) {
        count++;
        temp = temp->next;
    }
    printf("Total nodes: %d\n", count);
}

// Function to search for a node by value
void searchNode(node* head, int key) {
    int index = 0;
    node* temp = head;
    while (temp != NULL) {
        if (temp->data == key) {
            printf("Element %d found at index %d\n", key, index);
            return;
        }
        temp = temp->next;
        index++;
    }
    printf("Element %d not found\n", key);
}

int main() {
    node* head = NULL; // start with empty list
    int choice, subChoice, n, data, index, key;

    do {
        // Main Menu
        printf("\nMain Menu:\n");
        printf("1. Create List\n");
        printf("2. Insert\n");
        printf("3. Delete\n");
        printf("4. Display\n");
        printf("5. Count\n");
        printf("6. Search\n");
        printf("7. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1: // Create list
                printf("Enter number of nodes: ");
                scanf("%d", &n);
                head = createList(n);
                break;

            case 2: // Insert
                printf("\nInsert Menu:\n1. At Beginning\n2. At Index\n3. At End\nEnter choice: ");
                scanf("%d", &subChoice);
                printf("Enter data: ");
                scanf("%d", &data);
                if (subChoice == 2) {
                    printf("Enter index: ");
                    scanf("%d", &index);
                } else index = 0;
                head = insertNode(head, data, subChoice, index);
                break;

            case 3: // Delete
                printf("\nDelete Menu:\n1. First Node\n2. At Index\n3. Last Node\nEnter choice: ");
                scanf("%d", &subChoice);
                if (subChoice == 2) {
                    printf("Enter index: ");
                    scanf("%d", &index);
                } else index = 0;
                head = deleteNode(head, subChoice, index);
                break;

            case 4: // Display list
                linkedListTraversal(head);
                break;

            case 5: // Count nodes
                countNodes(head);
                break;

            case 6: // Search element
                printf("Enter element to search: ");
                scanf("%d", &key);
                searchNode(head, key);
                break;

            case 7: // Exit
                printf("Exiting...\n");
                break;

            default:
                printf("Invalid choice!\n");
        }
    } while (choice != 7);

    return 0;
}
